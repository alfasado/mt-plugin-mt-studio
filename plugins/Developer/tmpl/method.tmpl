<mt:if name="task">sub {
    my $component = MT->component( '<mt:var name="plugin_id">' );
    my $tmpl = File::Spec->catfile( $component->path, 'tmpl', 'handlers', '<mt:var name="mtmljob_basename">.tmpl' );
    require MT::FileMgr;
    my $fmgr = MT::FileMgr->new( 'Local' );
    my $template = $fmgr->get_data( $tmpl );
    require MT::Template::Context;
    require MT::Builder;
    my $ctx = MT::Template::Context->new;
    my $build = MT::Builder->new;
    my $tokens = $build->compile( $ctx, $template )
        or MT->log( $component->translate(
            'Parse error: [_1]', $build->errstr ) );
    defined( my $out = $build->build( $ctx, $tokens ) )
        or MT->log( $component->translate(
            'Build error: [_1]', $build->errstr ) );
    if ( $out ) {
        return 1;
    }
    return 0;
}
<mt:else>
<mt:if name="callback">sub {
    my $cb = shift;
    my @params = @_;
    my $component = MT->component( '<mt:var name="plugin_id">' );
    my $tmpl = File::Spec->catfile( $component->path, 'tmpl', 'handlers', '<mt:var name="mtmljob_basename">.tmpl' );
    require MT::FileMgr;
    my $fmgr = MT::FileMgr->new( 'Local' );
    my $template = $fmgr->get_data( $tmpl );
    require MT::Template::Context;
    require MT::Builder;
    my $ctx = MT::Template::Context->new;
    my $build = MT::Builder->new;
    my $app = MT->instance;
    my ( $model, $rebuild );
    if ( $cb->method =~ m/^cms_.*?\.(.*?)$/ ) {
        $model = $1;
    } elsif ( $cb->method =~ m/^api_.*?\.(.*?)$/ ) {
        $model = $1;
    } elsif ( $cb->method =~ m/^build_.*$/ ) {
        $rebuild = 1;
    }
    my $blog;
    if ( ( ref $app ) =~ /^MT::App::/ ) {
        if ( $app->blog ) {
            $blog = $app->blog;
        }
    }
    if ( $model ) {
        my $obj = $params[ 1 ];
        my $original = $params[ 2 ];
        if ( defined $obj ) {
            my $ds = $obj->datasource;
            $ctx->stash( $ds, $obj );
            if (! $blog ) {
                if ( ( $obj->has_column( 'blog_id' ) ) && ( $obj->blog_id ) ) {
                    require MT::Blog;
                    $blog = MT::Blog->load( $obj->blog_id );
                }
            }
            if ( $obj->has_column( 'status' ) ) {
                $ctx->{ __stash }{ vars }{ new_status } = $obj->status;
            }
        }
        if ( defined $original ) {
            if ( $original->has_column( 'status' ) ) {
                $ctx->{ __stash }{ vars }{ old_status } = $original->status;
            }
        }
    }
    if ( $blog ) {
        $ctx->stash( 'blog', $blog );
        $ctx->stash( 'blog_id', $blog->id );
    }
    if ( $rebuild ) {
        my %args = @_;
        if ( my $context = $args{ Context } ) {
            $ctx = $context;
        }
        if ( my $file = $args{ File } ) {
            $ctx->{ __stash }{ vars }{ publishing_file } = $file;
        }
    }
    my $tokens = $build->compile( $ctx, $template )
        or MT->log( $component->translate(
            'Parse error: [_1]', $build->errstr ) );
    defined( my $out = $build->build( $ctx, $tokens ) )
        or MT->log( $component->translate(
            'Build error: [_1]', $build->errstr ) );
    return $out;
}<mt:else>sub {
    <mt:if name="data_api">my ( $app, $endpoint ) = @_;<mt:else>my $app = shift;</mt:if>
    my $component = MT->component( '<mt:var name="plugin_id">' );
    my %param;
    my $tmpl = File::Spec->catfile( $component->path, 'tmpl', 'handlers', '<mt:var name="mtmljob_basename">.tmpl' );
<mt:if name="data_api">    my $data = $app->build_page( $tmpl, \%param );
    $data =~ s/\r|\n|\t//g;
    my $format = $app->current_format;
    eval {
        $data = $format->{ unserialize }->( $data );
    };
    return $data;
<mt:else>    return $app->build_page( $tmpl, \%param );
</mt:if>}</mt:if></mt:if>